{"version":3,"sources":["components/DataTable.tsx","components/NoViewPermission.tsx","views/admin/Users.tsx","utils/utils.ts","views/admin/AddUser.tsx","views/schoolAdmin/Sections.tsx","components/ConfirmationModal.tsx","views/schoolAdmin/AddSection.tsx","views/schoolAdmin/Teachers.tsx","views/schoolAdmin/AddTeacher.tsx","views/universal/Login.tsx","views/teacher/Section.tsx","views/teacher/GradeView.tsx","views/teacher/AddGrade.tsx","views/teacher/FinalGrades.tsx","components/AddClassModal.tsx","views/teacher/Classes.tsx","components/LogoutButton.tsx","components/Header.tsx","views/student/StudentClasses.tsx","views/student/StudentGrade.tsx","App.tsx","serviceWorker.js","index.js"],"names":["customSorter","recordA","recordB","propertyName","localeCompare","getColumnSearchProps","args","onFilter","valueToSearch","record","referencedPropertyName","toLowerCase","indexOf","toString","customFilter","filterIcon","filtered","SearchOutlined","style","color","undefined","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","placeholder","value","onChange","e","target","onPressEnter","width","marginBottom","display","type","onClick","icon","size","marginRight","DataTable","props","className","dataSource","data","columns","pagination","footer","onRow","loading","NoViewPermission","description","viewAllowedRoles","Users","user","React","useContext","MyContext","currentUserRole","role","useState","users","setUsers","useEffect","fetch","process","method","headers","credentials","body","JSON","stringify","query","then","res","json","catch","err","console","log","includes","title","dataIndex","key","render","lastName","fullName","firstName","middleInitial","concat","sorter","a","b","aName","bName","pageData","to","generateId","prefix","Date","now","Math","random","generateUsername","id","charAt","generatePassword","slice","getQuarterNumber","quarter","AddUser","setFirstName","setLastName","setMiddleInitial","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","setRole","Form","useForm","form","tailLayout","wrapperCol","offset","span","addUser","variables","message","success","resetFields","labelCol","onFinish","values","passwordCheckResult","returnValue","isValid","length","test","validatePassword","error","errMessage","Item","label","name","rules","required","Password","Group","optionType","Button","htmlType","block","Sections","sections","setSections","sectionFilter","finalSections","filteredSections","_","section","adviserId","ConfirmationModal","visible","onCancel","onConfirm","AddSection","teachers","setTeachers","sectionName","setSectionName","selectedTeacherId","setSelectedTeacherId","students","setStudents","confirmationModalIsVisible","setConfirmationModalIsVisible","isLoading","setIsLoading","holder","push","transformStudentFromSectionUpload","jsonObject","nameArr","split","nameArrElement2","index","lrn","handleSaveSection","sectionParams","addSection","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","ArrowLeftOutlined","teacher","Option","valuePropName","getValueFromEvent","event","files","accept","file","reader","FileReader","onload","result","bstr","wsname","SheetNames","Sheets","sheet_to_json","blankrows","filteredData","sheetIsValid","newStudents","newStudentObj","readAsBinaryString","handleFileUploadChange","Teachers","AddTeacher","transformTeacherFromSectionUpload","nameArr2","trim","i","indexInSheet","normalizedTeachers","teachersCopy","teacherCopy","addTeachers","newTeachers","newTeacherObj","pageSize","layout","Login","history","useHistory","handleFormSubmit","errors","login","window","location","reload","maxWidth","margin","SectionView","setSection","URLSearchParams","search","get","studentsBySectionId","GradeView","myClass","setMyClass","quarterNumber","setQuarterNumber","grades","setGrades","urlQuery","class","classId","parseInt","gradesByClassId","userCanUploadGrade","ret","teacherId","sectionId","student","score","scores","wwTotal","ptTotal","qaTotal","disabled","AddGrade","studentsByClassId","transformGradesFromUpload","studentId","getStudentIdFromLRN","ww","WW","pt","PT","qa","QA","initialGrade","initial","finalGrade","final","getScoresFromJson","addGrade","addGrades","newGrades","gradeObj","FinalGrades","finalGrades","rawGrade","grade","newFinalGrade","1","2","3","4","getFinalGrades","AddClassModal","isVisible","setIsVisible","setClassName","selectedSectionId","setSelectedSectionId","getDefaultTeacherValue","handleSave","maskClosable","initialValue","Classes","classes","setClasses","filter","setFilter","finalClasses","LogoutButton","logout","Header","selectedKey","setSelectedKey","mode","StudentClasses","classesBySectionId","studentGradesByClassId","sortedByQuarter","sum","getFinalGrade","App","setUser","me","tip","Provider","path","component","StudentGrade","exact","createContext","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.babcf502.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Table, Input, Button } from 'antd';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { ColumnsType } from 'antd/es/table';\r\n\r\ninterface Properties {\r\n    data: any,\r\n    columns: ColumnsType<any>,\r\n    loading?: boolean,\r\n    pagination?: object,\r\n    footer?: (currentPageData) => JSX.Element\r\n    onRow?: (record, rowIndex) => {}\r\n}\r\n\r\nexport const customSorter = (recordA, recordB, propertyName) => {\r\n    if (recordA && !recordB) return 1;\r\n    if (!recordA && recordB) return -1;\r\n    if (!recordA && !recordB) return 0;\r\n\r\n    return recordA[propertyName].localeCompare(recordB[propertyName]);\r\n}\r\n\r\nexport const getColumnSearchProps = (\r\n    propertyName: string,\r\n    args?: {\r\n        referencedPropertyName?: string,\r\n        customFilter?: (valueToSearch, record) => boolean\r\n    }\r\n) => {\r\n    return ({\r\n        onFilter: (valueToSearch, record): boolean => {\r\n            if (args) {\r\n                if (args.referencedPropertyName) {\r\n                    return record[propertyName][args.referencedPropertyName].toLowerCase().indexOf(valueToSearch.toString().toLowerCase()) >= 0;\r\n                } else if (args.customFilter) {\r\n                    return args.customFilter(valueToSearch, record);\r\n                } else {\r\n                    return false;\r\n                }\r\n            } else {\r\n                return record[propertyName].toLowerCase().indexOf(valueToSearch.toString().toLowerCase()) >= 0;\r\n            }\r\n        },\r\n        filterIcon: filtered => (\r\n            <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />\r\n        ),\r\n        filterDropdown({ setSelectedKeys, selectedKeys, confirm, clearFilters }) {\r\n            return (<div style={{ padding: 8 }}>\r\n                <Input\r\n                    // ref={node => {\r\n                    //     this.searchInput = node;\r\n                    // }}\r\n                    placeholder='search'\r\n                    value={selectedKeys[0]}\r\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n                    onPressEnter={confirm}\r\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n                />\r\n                <Button\r\n                    type='primary'\r\n                    onClick={confirm}\r\n                    icon={<SearchOutlined />}\r\n                    size='small'\r\n                    style={{ width: 90, marginRight: 8 }}\r\n                >\r\n                    Search\r\n                </Button>\r\n                <Button onClick={clearFilters} size=\"small\" style={{ width: 90 }}>\r\n                    Reset\r\n                </Button>\r\n            </div>\r\n            );\r\n        },\r\n    })\r\n}\r\n\r\nconst DataTable = (props: Properties) => {\r\n    return (\r\n        <div className='table-wrapper'>\r\n            <Table\r\n                dataSource={props.data}\r\n                columns={props.columns}\r\n                pagination={props.pagination}\r\n                footer={props.footer}\r\n                onRow={props.onRow}\r\n                loading={props.loading}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DataTable;","import React from 'react';\r\nimport { Empty } from 'antd';\r\n\r\nconst NoViewPermission = () => (\r\n    <Empty description=\"You don't have permission to view this page\" />\r\n);\r\n\r\nexport default NoViewPermission;\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { User } from '../../interfaces';\r\n\r\nimport DataTable, { getColumnSearchProps, customSorter } from '../../components/DataTable';\r\nimport NoViewPermission from '../../components/NoViewPermission';\r\nimport { MyContext } from './../../App';\r\n\r\n\r\nconst viewAllowedRoles = ['admin'];\r\n\r\ninterface Properties { }\r\n\r\nconst Users = (props: Properties) => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    const currentUserRole = user?.role.type;\r\n\r\n    const [users, setUsers] = React.useState<readonly User[]>();\r\n\r\n    React.useEffect(() => {\r\n        const query = `\r\n        query {\r\n            users {\r\n                firstName\r\n                lastName\r\n                middleInitial\r\n                email\r\n                role\r\n            }\r\n        }\r\n        `;\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setUsers(res.data.users);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, []);\r\n\r\n    if (!(currentUserRole && viewAllowedRoles.includes(currentUserRole))) {\r\n        return <NoViewPermission />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Users</h1>\r\n            <DataTable\r\n                data={users}\r\n                columns={[\r\n                    {\r\n                        title: 'Name',\r\n                        dataIndex: 'lastName',\r\n                        key: 'fullName',\r\n                        render: (lastName, user) => {\r\n                            let fullName = `${lastName}, ${user.firstName}`;\r\n                            if (user.middleInitial) {\r\n                                fullName = fullName.concat(` ${user.middleInitial}.`);\r\n                            }\r\n                            return fullName;\r\n                        },\r\n                        sorter: (a, b) => {\r\n                            if (a && !b) return 1;\r\n                            if (!a && b) return -1;\r\n                            if (!a && !b) return 0;\r\n\r\n                            const aName = `${a.lastName}, ${a.firstName}`;\r\n                            const bName = `${b.lastName}, ${b.firstName}`;\r\n\r\n                            return aName.localeCompare(bName);\r\n                        },\r\n                        ...getColumnSearchProps(\r\n                            'lastName',\r\n                            {\r\n                                customFilter: (valueToSearch, record) => {\r\n                                    const name = `${record.lastName}, ${record.firstName}`;\r\n                                    return name.toLowerCase().indexOf(valueToSearch.toLowerCase()) >= 0;\r\n                                }\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        title: 'Username',\r\n                        dataIndex: 'email',\r\n                        key: 'email',\r\n                        sorter: (a, b) => customSorter(a, b, 'email'),\r\n                        ...getColumnSearchProps('email')\r\n                    },\r\n                    {\r\n                        title: 'Role',\r\n                        dataIndex: 'role',\r\n                        key: 'role',\r\n                        render: (role) => {\r\n                            return role.type;\r\n                        },\r\n                        sorter: true,\r\n                        ...getColumnSearchProps(\r\n                            'lastName',\r\n                            {\r\n                                customFilter: (valueToSearch, record) => {\r\n                                    const name = `${record.role.type}, ${record.role.type}`;\r\n                                    return name.toLowerCase().indexOf(valueToSearch.toLowerCase()) >= 0;\r\n                                }\r\n                            }\r\n                        )\r\n                    }\r\n                ]}\r\n                footer={(pageData) => {\r\n                    return (\r\n                        <>\r\n                            <Link\r\n                                to='/addUser'\r\n                                style={{ display: 'block' }}\r\n                            >\r\n                                <Button type='primary'>Add User</Button>\r\n                            </Link>\r\n                        </>\r\n                    )\r\n                }}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Users;","export const generateId = (prefix: string) => {\r\n    return `${prefix}-${Date.now()}-${(Math.random()*100).toString()}`;\r\n}\r\n\r\nexport const generateUsername = (id: string, firstName: string, lastName: string) => {\r\n    return `${lastName}${firstName.charAt(1)}${id}`.toLowerCase();\r\n}\r\n\r\nexport const generatePassword = () => {\r\n    return Math.random().toString(36).slice(2);\r\n}\r\n\r\nexport const getQuarterNumber = (quarter): string => {\r\n    switch (quarter) {\r\n        case '1':\r\n            return '1st';\r\n        case '2':\r\n            return '2nd';\r\n        case '3':\r\n            return '3rd';\r\n        case '4':\r\n            return '4th';\r\n        default:\r\n            return '';\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Form, Input, Radio, message } from 'antd';\r\nimport { Role } from '../../interfaces';\r\nimport { generateId } from '../../utils/utils';\r\nimport { MyContext } from './../../App';\r\n\r\nimport NoViewPermission from '../../components/NoViewPermission';\r\n\r\nconst viewAllowedRoles = ['admin'];\r\n\r\ninterface Properties { }\r\n\r\nconst AddUser = (props: Properties) => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    const currentUserRole = user?.role.type;\r\n\r\n    const [firstName, setFirstName] = React.useState<string>();\r\n    const [lastName, setLastName] = React.useState<string>();\r\n    const [middleInitial, setMiddleInitial] = React.useState<string>();\r\n    const [email, setEmail] = React.useState<string>();\r\n    const [password, setPassword] = React.useState<string>();\r\n    const [confirmPassword, setConfirmPassword] = React.useState<string>();\r\n    const [role, setRole] = React.useState<string>();\r\n\r\n    const [form] = Form.useForm();\r\n    const layout = {\r\n        labelCol: { span: 4 },\r\n        wrapperCol: { span: 20 },\r\n    };\r\n    const tailLayout = {\r\n        wrapperCol: { offset: 8, span: 16 },\r\n    };\r\n\r\n    const validatePassword = (password, confirmPassword): {\r\n        isValid: boolean,\r\n        errMessage?: string\r\n    } => {\r\n        let returnValue = {\r\n            isValid: false\r\n        }\r\n\r\n        const specialCharacters = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\r\n\r\n        if (password !== confirmPassword) {\r\n            returnValue['errMessage'] = `Passwords don't match!`;\r\n        } else if (password.length < 8 || !specialCharacters.test(password)) {\r\n            returnValue['errMessage'] = `Password must be at least 8 characters and contain a special character`;\r\n        } else {\r\n            returnValue.isValid = true;\r\n        }\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    const onFormFinish = (values) => {\r\n        const passwordCheckResult = validatePassword(values.password, values.confirmPassword);\r\n        if (passwordCheckResult.isValid) {\r\n            const role = {\r\n                type: values.role\r\n            }; // TODO currently hardcoded, add generator based on user input\r\n            addUser({\r\n                firstName: values.firstName,\r\n                lastName: values.lastName,\r\n                middleInitial: values.middleInitial,\r\n                email: values.email,\r\n                password: values.password,\r\n                role: role\r\n            });\r\n        } else {\r\n            message.error(passwordCheckResult.errMessage, 5);\r\n        }\r\n    }\r\n\r\n    const addUser = (args: {\r\n        firstName: string,\r\n        lastName: string,\r\n        middleInitial?: string,\r\n        email: string,\r\n        password: string,\r\n        role: Role\r\n    }) => {\r\n        const { firstName, lastName, middleInitial, email, password, role } = args;\r\n        const id = generateId('user');\r\n        const user = {\r\n            id,\r\n            firstName,\r\n            lastName,\r\n            middleInitial,\r\n            email,\r\n            password,\r\n            role\r\n        };\r\n        const query = `\r\n            mutation($id: String!, $firstName: String!, $lastName: String!, $middleInitial: String, $email: String!, $password: String!, $role: Object!) {\r\n                addUser(id: $id, firstName: $firstName, lastName: $lastName, middleInitial: $middleInitial, email: $email, password: $password, role: $role) {\r\n                    firstName,\r\n                    lastName,\r\n                    middleInitial,\r\n                    email,\r\n                    role\r\n                }\r\n            }\r\n        `;\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query,\r\n                variables: user\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                message.success('User successfully added', 5);\r\n                form.resetFields();\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    if (!(currentUserRole && viewAllowedRoles.includes(currentUserRole))) {\r\n        return <NoViewPermission />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                {...layout}\r\n                form={form}\r\n                onFinish={onFormFinish}\r\n            >\r\n                <Form.Item\r\n                    label='First Name'\r\n                    name='firstName'\r\n                    rules={[{ required: true, message: 'Please input first name!' }]}\r\n                >\r\n                    <Input value={firstName} onChange={(e) => setFirstName(e.target.value)} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label='Last Name'\r\n                    name='lastName'\r\n                    rules={[{ required: true, message: 'Please input last name!' }]}\r\n                >\r\n                    <Input value={lastName} onChange={(e) => setLastName(e.target.value)} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label='Middle Initial'\r\n                    name='middleInitial'\r\n                >\r\n                    <Input value={middleInitial} onChange={(e) => setMiddleInitial(e.target.value)} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label='Email'\r\n                    name='email'\r\n                    rules={[{ required: true, message: 'Please input email!' }]}\r\n                >\r\n                    <Input value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label='Password'\r\n                    name='password'\r\n                    rules={[{ required: true, message: 'Please input password!' }]}\r\n                >\r\n                    <Input.Password value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label='Confirm Password'\r\n                    name='confirmPassword'\r\n                    rules={[{ required: true, message: 'Please input confirm password!' }]}\r\n                >\r\n                    <Input.Password value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label='Role'\r\n                    name='role'\r\n                    rules={[{ required: true, message: 'Please choose a role!' }]}\r\n                >\r\n                    <Radio.Group\r\n                        optionType='button'\r\n                        value={role}\r\n                        onChange={(e) => setRole(e.target.value)}\r\n                    >\r\n                        <Radio.Button value={'admin'}>ADMIN</Radio.Button>\r\n                        <Radio.Button value={'schoolAdmin'}>SCHOOL ADMIN</Radio.Button>\r\n                        <Radio.Button value={'teacher'}>TEACHER</Radio.Button>\r\n                        <Radio.Button value={'student'}>STUDENT</Radio.Button>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    {...tailLayout}\r\n                >\r\n                    <Button type='primary' htmlType='submit' style={{ marginBottom: '10px' }} block>Add User</Button>\r\n                    <Link\r\n                        to='/users'\r\n                        style={{ display: 'block' }}\r\n                    >\r\n                        <Button block>Back To Users</Button>\r\n                    </Link>\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddUser;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Radio } from 'antd';\r\n\r\nimport { Section } from '../../interfaces';\r\n\r\nimport DataTable from '../../components/DataTable';\r\nimport NoViewPermission from '../../components/NoViewPermission';\r\n\r\nimport { MyContext } from '../../App';\r\n\r\ninterface Properties { }\r\n\r\nconst viewAllowedRoles = ['admin', 'schoolAdmin'];\r\n\r\nconst Sections = (props: Properties) => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    const currentUserRole = user?.role.type;\r\n\r\n    const [sections, setSections] = React.useState<readonly Section[]>([]);\r\n    const [sectionFilter, setSectionFilter] = React.useState<'mine' | 'all'>('all');\r\n\r\n    React.useEffect(() => {\r\n        if (user) {\r\n            const query = `\r\n                query {\r\n                    sections {\r\n                        id\r\n                        name\r\n                        adviserId {\r\n                            id\r\n                            firstName\r\n                            lastName\r\n                        }\r\n                    }\r\n                }\r\n            `;\r\n\r\n            fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    query\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    setSections(res.data.sections);\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n    }, []);\r\n\r\n    let finalSections: Section[] = [];\r\n    if (sectionFilter == 'mine') {\r\n        const filteredSections = _.filter(sections, section => {\r\n            return section.adviserId.id == user?.id;\r\n        });\r\n        finalSections = [...filteredSections];\r\n    } else if (sectionFilter == 'all' && sections) {\r\n        finalSections = [...sections];\r\n    }\r\n\r\n    if (!(currentUserRole && viewAllowedRoles.includes(currentUserRole))) {\r\n        return <NoViewPermission />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <Radio.Group onChange={(e) => setSectionFilter(e.target.value)} value={sectionFilter}>\r\n                <Radio value='all'>All</Radio>\r\n                <Radio value='mine'>My Section</Radio>\r\n            </Radio.Group> */}\r\n            <h1>Sections</h1>\r\n            <DataTable\r\n                data={finalSections}\r\n                columns={[\r\n                    {\r\n                        title: 'Name',\r\n                        dataIndex: 'name',\r\n                        key: 'name',\r\n                        render: (name, record) => {\r\n                            return <Link to={`/section?id=${record.id}`}>{`${name}`}</Link>;\r\n                        }\r\n                    },\r\n                    {\r\n                        title: 'Adviser',\r\n                        dataIndex: 'adviserId',\r\n                        key: 'adviserId',\r\n                        render: (adviserId) => {\r\n                            if (adviserId) {\r\n                                return `${adviserId.lastName}, ${adviserId.firstName}`;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        title: 'Student List',\r\n                        dataIndex: 'id',\r\n                        key: 'studentList',\r\n                        render: (id) => {\r\n                            return <Link to={`/section?id=${id}`}><Button>Students</Button></Link>;\r\n                        }\r\n                    }, {\r\n                        title: 'Class List',\r\n                        dataIndex: 'id',\r\n                        key: 'classList',\r\n                        render: (id) => {\r\n                            return <Link to={`/classes?sectionId=${id}`}><Button>Classes</Button></Link>;\r\n                        }\r\n                    },\r\n                ]}\r\n                footer={(pageData) => {\r\n                    return (\r\n                        <Link\r\n                            to='/addSection'\r\n                            style={{ display: 'block' }}\r\n                        >\r\n                            <Button type='primary'>Add Section</Button>\r\n                        </Link>\r\n                    )\r\n                }}\r\n            />\r\n            <div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Sections;","import React from 'react';\r\nimport { Button, Modal } from 'antd';\r\n\r\ninterface Properties {\r\n    visible: boolean,\r\n    onConfirm: () => void,\r\n    onCancel: () => void\r\n}\r\n\r\nconst ConfirmationModal = (props: Properties) => {\r\n    return (\r\n        <Modal\r\n            visible={props.visible}\r\n            footer={[\r\n                <Button key='cancel' onClick={props.onCancel}>Cancel</Button>,\r\n                <Button key='confirm' type='primary' onClick={props.onConfirm}>Confirm</Button>\r\n            ]}\r\n            onCancel={props.onCancel}\r\n        >\r\n            <span>Are you sure? This action is final.</span>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ConfirmationModal;","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { Input, Form, Button, message, Select } from 'antd';\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\nimport * as XLSX from 'xlsx';\r\nimport * as _ from 'lodash';\r\n\r\nimport { generateId, generateUsername, generatePassword } from '../../utils/utils';\r\nimport { User } from '../../interfaces';\r\n\r\nimport DataTable from '../../components/DataTable';\r\nimport ConfirmationModal from '../../components/ConfirmationModal';\r\nimport NoViewPermission from '../../components/NoViewPermission';\r\n\r\nimport { MyContext } from './../../App';\r\n\r\ninterface sectionParams {\r\n    name: string,\r\n    adviserId: string\r\n}\r\n\r\ninterface studentParams {\r\n    firstName: string,\r\n    lastName: string,\r\n    middleInitial: string,\r\n    email: string,\r\n    password: string,\r\n    role: {\r\n        type: string,\r\n        lrn: string\r\n    }\r\n}\r\n\r\ninterface student extends studentParams {\r\n    id: string\r\n}\r\n\r\nconst viewAllowedRoles = ['admin', 'schoolAdmin'];\r\n\r\nconst AddSection = () => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    const currentUserRole = user?.role.type;\r\n\r\n    const [teachers, setTeachers] = React.useState<readonly User[]>();\r\n    const [sectionName, setSectionName] = React.useState<string>('');\r\n    const [selectedTeacherId, setSelectedTeacherId] = React.useState<string>('');\r\n    const [students, setStudents] = React.useState<readonly student[]>([]);\r\n    const [confirmationModalIsVisible, setConfirmationModalIsVisible] = React.useState<boolean>(false);\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        const query = `\r\n        query {\r\n            users(filter: {role: {type: \"teacher\"}}) {\r\n                id\r\n                firstName\r\n                lastName\r\n                middleInitial\r\n                email\r\n                role\r\n            }\r\n        }\r\n        `;\r\n\r\n        if (user?.role.type == 'teacher') {\r\n            const holder: User[] = [];\r\n            holder.push(user);\r\n            setTeachers(holder);\r\n        } else {\r\n            fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    query\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    setTeachers(_.sortBy(res.data.users, 'lastName'));\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n    }, []);\r\n\r\n    const normFile = (event) => {\r\n        if (event && event.target && event.target.files) {\r\n            return event.target.files[0]\r\n        }\r\n    };\r\n\r\n    const transformStudentFromSectionUpload = (jsonObject): student => {\r\n        const id = generateId('student');\r\n        const nameArr: string[] = jsonObject.name.split(',');\r\n        const lastName = nameArr[0];\r\n        const nameArrElement2 = nameArr[1];\r\n        const firstName = nameArrElement2.slice(1, nameArrElement2.length - 3);\r\n        const middleInitial = nameArrElement2.charAt(nameArrElement2.length - 2);\r\n        const userName = generateUsername(jsonObject.index, firstName, lastName);\r\n        const password = generatePassword();\r\n\r\n        return {\r\n            id,\r\n            firstName,\r\n            lastName,\r\n            middleInitial,\r\n            email: userName,\r\n            password,\r\n            role: {\r\n                type: 'student',\r\n                lrn: jsonObject.lrn.toString()\r\n            }\r\n        };\r\n    }\r\n\r\n    const handleFileUploadChange = (event) => {\r\n        const files = event.target.files\r\n        const file = files[0];\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = (e) => { // TODO break into smaller functions!\r\n            if (e && e.target && e.target.result) {\r\n                const bstr = e.target.result;\r\n                const wb = XLSX.read(bstr, { type: 'binary' });\r\n                /* Get first worksheet */\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n                /* Convert array of arrays */\r\n                const data = XLSX.utils.sheet_to_json(ws, { blankrows: false });\r\n                const filteredData = _.filter(data, jsonObject => {\r\n                    if (jsonObject.index) {\r\n                        return jsonObject;\r\n                    }\r\n                });\r\n\r\n                let sheetIsValid = true;\r\n                const newStudents: student[] = [];\r\n                for (const jsonObject of filteredData) {\r\n                    if (jsonObject.name && jsonObject.lrn) {\r\n                        const newStudentObj: student = transformStudentFromSectionUpload(jsonObject);\r\n                        newStudents.push(newStudentObj);\r\n                    } else {\r\n                        sheetIsValid = false;\r\n                    }\r\n                };\r\n                if (sheetIsValid) {\r\n                    setStudents(newStudents);\r\n                } else {\r\n                    message.error('Some student fields are not filled in. Please complete the Excel sheet before uploading!', 6);\r\n                }\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        reader.readAsBinaryString(file);\r\n    };\r\n\r\n    const handleSaveSection = async (sectionParams: sectionParams, students: readonly student[]) => {\r\n        const addSection = async () => {\r\n            const id = generateId('section');\r\n            const { name, adviserId } = sectionParams;\r\n            const args = {\r\n                id,\r\n                name,\r\n                adviserId,\r\n                students\r\n            }\r\n            const addSectionQuery = `\r\n                mutation($id: String!, $name: String!, $adviserId: String!, $students: [UserInput!]!) {\r\n                    addSection(id: $id, name: $name, adviserId: $adviserId, students: $students) {\r\n                        name\r\n                    }\r\n                }\r\n                `;\r\n\r\n            fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    query: addSectionQuery,\r\n                    variables: args\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res);\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n\r\n        await addSection();\r\n        setConfirmationModalIsVisible(false);\r\n        message.success('Section and students are succesfully added', 5);\r\n\r\n        // auto download excel file with passwords\r\n        /* make the worksheet */\r\n        var ws = XLSX.utils.json_to_sheet([...students]);\r\n        /* add to workbook */\r\n        var wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, \"Students\");\r\n        /* write workbook */\r\n        XLSX.writeFile(wb, `${sectionParams.name}-generated.xlsx`);\r\n    }\r\n\r\n\r\n    const layout = {\r\n        labelCol: { span: 3 },\r\n        wrapperCol: { span: 21 },\r\n    };\r\n\r\n    if (!(currentUserRole && viewAllowedRoles.includes(currentUserRole))) {\r\n        return <NoViewPermission />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to='/sections'><Button icon={<ArrowLeftOutlined />}>Return To Sections</Button></Link>\r\n            <h1>Add A Section</h1>\r\n            <Form\r\n                onFinish={() => setConfirmationModalIsVisible(true)}\r\n                {...layout}\r\n            >\r\n                <Form.Item\r\n                    label='Section Name'\r\n                    name='sectionName'\r\n                    rules={[{ required: true, message: 'Please input a section name!' }]}\r\n                >\r\n                    <Input value={sectionName} onChange={(e) => setSectionName(e.target.value)} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label='Adviser'\r\n                    name='adviser'\r\n                    rules={[{ required: true, message: 'Please choose an adviser!' }]}\r\n                >\r\n                    <Select\r\n                        onChange={(value: string) => setSelectedTeacherId(value)}\r\n                    >\r\n                        {\r\n                            _.map(teachers, teacher => {\r\n                                return <Select.Option value={teacher.id} key={teacher.id}>{`${teacher.lastName}, ${teacher.firstName} ${teacher.middleInitial}`}</Select.Option>\r\n                            })\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name='upload'\r\n                    label='Upload'\r\n                    valuePropName='fileList'\r\n                    getValueFromEvent={normFile}\r\n                    rules={[{ required: true, message: 'Please upload a section file!' }]}\r\n                >\r\n                    <input\r\n                        type='file'\r\n                        id='sectionFileUpload'\r\n                        name='sectionFileUpload'\r\n                        accept='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n                        onChange={(e) => {\r\n                            setIsLoading(true);\r\n                            handleFileUploadChange(e);\r\n                        }} />\r\n                </Form.Item>\r\n\r\n                <h2>Students Preview:</h2>\r\n                <DataTable\r\n                    loading={isLoading}\r\n                    data={students}\r\n                    columns={[\r\n                        {\r\n                            title: 'Name',\r\n                            dataIndex: 'lastName',\r\n                            key: 'fullName',\r\n                            render: (lastName, user) => {\r\n                                let fullName = `${lastName}, ${user.firstName}`;\r\n                                if (user.middleInitial) {\r\n                                    fullName = fullName.concat(` ${user.middleInitial}.`);\r\n                                }\r\n                                return fullName;\r\n                            }\r\n                        },\r\n                        {\r\n                            title: 'Email',\r\n                            dataIndex: 'email',\r\n                            key: 'email'\r\n                        },\r\n                        {\r\n                            title: 'LRN',\r\n                            dataIndex: 'role',\r\n                            key: 'lrn',\r\n                            render: (role) => {\r\n                                return role.lrn;\r\n                            }\r\n                        },\r\n                        {\r\n                            title: 'Password',\r\n                            dataIndex: 'password',\r\n                            key: 'password',\r\n                            render: (password) => {\r\n                                return password;\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                <Form.Item>\r\n                    <Button type='primary' htmlType='submit' style={{ marginBottom: '10px' }}>Upload To Database</Button><br />\r\n                    <Link to='/sections'><Button icon={<ArrowLeftOutlined />}>Return To Sections</Button></Link>\r\n                </Form.Item>\r\n            </Form>\r\n            <ConfirmationModal\r\n                visible={confirmationModalIsVisible}\r\n                onConfirm={async () => {\r\n                    await handleSaveSection({\r\n                        name: sectionName,\r\n                        adviserId: selectedTeacherId\r\n                    },\r\n                        students\r\n                    );\r\n                }}\r\n                onCancel={() => setConfirmationModalIsVisible(false)}\r\n            />\r\n        </>\r\n    );\r\n}\r\nexport default AddSection;","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { User, Role } from '../../interfaces';\r\n\r\nimport DataTable from '../../components/DataTable';\r\nimport NoViewPermission from '../../components/NoViewPermission';\r\nimport { MyContext } from '../../App';\r\n\r\ninterface Properties { }\r\n\r\nconst viewAllowedRoles = ['admin', 'schoolAdmin'];\r\n\r\nconst Teachers = (props: Properties) => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    const currentUserRole = user?.role.type;\r\n\r\n    const [teachers, setTeachers] = React.useState<readonly User[]>();\r\n\r\n    React.useEffect(() => {\r\n        const query = `\r\n        query {\r\n            users(filter: {role: {type: \"teacher\"}}){\r\n                id\r\n                firstName\r\n                lastName\r\n                email\r\n                password\r\n                role\r\n              }\r\n        }\r\n        `;\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setTeachers(res.data.users);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, []);\r\n\r\n    if (!(currentUserRole && viewAllowedRoles.includes(currentUserRole))) {\r\n        return <NoViewPermission />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Teachers</h1>\r\n            <DataTable\r\n                data={teachers}\r\n                columns={[\r\n                    {\r\n                        title: 'Name',\r\n                        dataIndex: 'lastName',\r\n                        key: 'fullName',\r\n                        render: (lastName, user) => {\r\n                            let fullName = `${lastName}, ${user.firstName}`;\r\n                            if (user.middleInitial) {\r\n                                fullName = fullName.concat(` ${user.middleInitial}.`);\r\n                            }\r\n                            return fullName;\r\n                        }\r\n                    },\r\n                    {\r\n                        title: 'Username',\r\n                        dataIndex: 'email',\r\n                        key: 'email'\r\n                    }\r\n                ]}\r\n                footer={(pageData) => {\r\n                    return (\r\n                        <>\r\n                            <Link\r\n                                to='/addTeacher'\r\n                                style={{ display: 'block' }}\r\n                            >\r\n                                <Button type='primary'>Add Teachers</Button>\r\n                            </Link>\r\n                        </>\r\n                    )\r\n                }}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Teachers;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, message, } from 'antd';\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\nimport * as XLSX from 'xlsx';\r\nimport * as _ from 'lodash';\r\n\r\nimport { generateId, generateUsername, generatePassword } from '../../utils/utils';\r\n\r\nimport DataTable from '../../components/DataTable';\r\nimport ConfirmationModal from '../../components/ConfirmationModal';\r\nimport NoViewPermission from '../../components/NoViewPermission';\r\n\r\nimport { MyContext } from './../../App';\r\n\r\ninterface teacherParams {\r\n    firstName: string,\r\n    lastName: string,\r\n    middleInitial: string,\r\n    email: string,\r\n    password: string,\r\n    role: {\r\n        type: string,\r\n        indexInSheet?: string\r\n    }\r\n}\r\n\r\ninterface teacher extends teacherParams {\r\n    id: string\r\n}\r\n\r\nconst viewAllowedRoles = ['admin', 'schoolAdmin'];\r\n\r\nconst AddTeacher = () => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    const currentUserRole = user?.role.type;\r\n\r\n    const [teachers, setTeachers] = React.useState<readonly teacher[]>([]);\r\n    const [confirmationModalIsVisible, setConfirmationModalIsVisible] = React.useState<boolean>(false);\r\n\r\n    const normFile = (event) => {\r\n        if (event && event.target && event.target.files) {\r\n            return event.target.files[0]\r\n        }\r\n    };\r\n\r\n    const transformTeacherFromSectionUpload = (jsonObject): teacher => {\r\n        const id = generateId('teacher');\r\n        const nameArr: string[] = jsonObject.name.split(',');\r\n        const lastName = nameArr[0];\r\n        const nameArr2 = nameArr[1].trim().split(' ');\r\n\r\n        let firstName = '';\r\n        for (let i = 0; i < nameArr2.length - 1; i++) {\r\n            firstName = firstName.concat(` ${nameArr2[i]}`);\r\n        }\r\n\r\n        const middleInitial = nameArr2[nameArr2.length - 1];\r\n        const userName = generateUsername(jsonObject.index, firstName, lastName);\r\n        const password = generatePassword();\r\n\r\n        return {\r\n            id,\r\n            firstName,\r\n            lastName,\r\n            middleInitial,\r\n            email: userName,\r\n            password,\r\n            role: {\r\n                type: 'teacher',\r\n                indexInSheet: jsonObject.index\r\n            }\r\n        };\r\n    }\r\n\r\n    const handleFileUploadChange = (event) => {\r\n        const files = event.target.files\r\n        const file = files[0];\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = (e) => { // TODO break into smaller functions!\r\n            if (e && e.target && e.target.result) {\r\n                const bstr = e.target.result;\r\n                const wb = XLSX.read(bstr, { type: 'binary' });\r\n                /* Get first worksheet */\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n                /* Convert array of arrays */\r\n                const data = XLSX.utils.sheet_to_json(ws, { blankrows: false });\r\n                const filteredData = _.filter(data, jsonObject => {\r\n                    if (jsonObject.index) {\r\n                        return jsonObject;\r\n                    }\r\n                });\r\n\r\n                let sheetIsValid = true;\r\n                const newTeachers: teacher[] = [];\r\n                for (const jsonObject of filteredData) {\r\n                    if (jsonObject.index && jsonObject.name) {\r\n                        const newTeacherObj: teacher = transformTeacherFromSectionUpload(jsonObject);\r\n                        newTeachers.push(newTeacherObj);\r\n                    } else {\r\n                        sheetIsValid = false;\r\n                    }\r\n                };\r\n                if (sheetIsValid) {\r\n                    setTeachers(newTeachers);\r\n                } else {\r\n                    message.error('Some teacher fields are not filled in. Please complete the Excel sheet before uploading!', 6);\r\n                }\r\n            }\r\n        };\r\n        reader.readAsBinaryString(file);\r\n    };\r\n\r\n    const handleSaveSection = async (teachers: readonly teacher[]) => {\r\n        const normalizedTeachers: teacher[] = [];\r\n        const teachersCopy = [...teachers];\r\n        for (const teacher of teachersCopy) {\r\n            const teacherCopy = { ...teacher };\r\n            delete teacherCopy.role.indexInSheet;\r\n            normalizedTeachers.push(teacherCopy);\r\n        }\r\n\r\n        const addTeachers = async () => {\r\n            const addTeacherQuery = `\r\n                mutation($users: [UserInput!]!) {\r\n                    addUsers(users: $users) {\r\n                        firstName\r\n                        lastName\r\n                        email\r\n                    }\r\n                }\r\n                `;\r\n\r\n            fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    query: addTeacherQuery,\r\n                    variables: { users: normalizedTeachers }\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res);\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n\r\n        await addTeachers();\r\n        setConfirmationModalIsVisible(false);\r\n        message.success('Teachers are succesfully added', 5);\r\n\r\n        // auto download excel file with passwords\r\n        /* make the worksheet */\r\n        var ws = XLSX.utils.json_to_sheet([...teachers]);\r\n        /* add to workbook */\r\n        var wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, \"Teachers\");\r\n        /* write workbook */\r\n        XLSX.writeFile(wb, \"Teachers-generated.xlsx\");\r\n    }\r\n\r\n    const layout = {\r\n        labelCol: { span: 3 },\r\n        wrapperCol: { span: 21 },\r\n    };\r\n\r\n    if (!(currentUserRole && viewAllowedRoles.includes(currentUserRole))) {\r\n        return <NoViewPermission />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to='/teachers'><Button icon={<ArrowLeftOutlined />}>Return To Teachers</Button></Link>\r\n            <h1>Upload Teachers</h1>\r\n            <Form\r\n                onFinish={() => setConfirmationModalIsVisible(true)}\r\n                {...layout}\r\n            >\r\n                <Form.Item\r\n                    name='upload'\r\n                    label='Upload'\r\n                    valuePropName='fileList'\r\n                    getValueFromEvent={normFile}\r\n                    rules={[{ required: true, message: 'Please upload a teachers file!' }]}\r\n                >\r\n                    <input type='file' id='teachersFileUpload' name='teachersFileUpload' accept='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' onChange={handleFileUploadChange} />\r\n                </Form.Item>\r\n\r\n                <h2>Teachers Preview:</h2>\r\n                <DataTable\r\n                    data={teachers}\r\n                    pagination={{ pageSize: 50 }}\r\n                    columns={[\r\n                        {\r\n                            title: 'Index',\r\n                            dataIndex: 'role',\r\n                            key: 'index',\r\n                            render: (role) => {\r\n                                return role.indexInSheet;\r\n                            },\r\n                            width: 50\r\n                        },\r\n                        {\r\n                            title: 'Name',\r\n                            dataIndex: 'lastName',\r\n                            key: 'fullName',\r\n                            render: (lastName, user) => {\r\n                                let fullName = `${lastName}, ${user.firstName}`;\r\n                                if (user.middleInitial) {\r\n                                    fullName = fullName.concat(` ${user.middleInitial}`);\r\n                                }\r\n                                return fullName;\r\n                            },\r\n                            width: 300\r\n                        },\r\n                        {\r\n                            title: 'Username',\r\n                            dataIndex: 'email',\r\n                            key: 'email'\r\n                        },\r\n                        {\r\n                            title: 'Password',\r\n                            dataIndex: 'password',\r\n                            key: 'password'\r\n                        }\r\n                    ]}\r\n                />\r\n                <Form.Item>\r\n                    <Button type='primary' htmlType='submit' style={{ marginBottom: '10px' }}>Upload To Database</Button><br />\r\n                    <Link to='/teachers'><Button icon={<ArrowLeftOutlined />}>Return To Teachers</Button></Link>\r\n                </Form.Item>\r\n            </Form>\r\n            <ConfirmationModal\r\n                visible={confirmationModalIsVisible}\r\n                onConfirm={async () => {\r\n                    await handleSaveSection(teachers);\r\n                }}\r\n                onCancel={() => setConfirmationModalIsVisible(false)}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddTeacher;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Form, Input, Button, message } from 'antd';\r\n\r\nimport { MyContext } from './../../App';\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 20 },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 4, span: 20 },\r\n};\r\n\r\nconst Login = () => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    \r\n    const history = useHistory();\r\n\r\n    const [email, setEmail] = React.useState<string>();\r\n    const [password, setPassword] = React.useState<string>();\r\n\r\n    React.useEffect(() => {\r\n        if (user) {\r\n            history.push('/');\r\n        }\r\n    }, [user, history]);\r\n\r\n    const handleFormSubmit = async () => {\r\n        const query = `\r\n        mutation($email: String!, $password: String!) {\r\n            login(email: $email, password: $password) {\r\n                email\r\n                password\r\n            }\r\n        }\r\n        `;\r\n\r\n        const args = {\r\n            email,\r\n            password\r\n        }\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query,\r\n                variables: args\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.errors) {\r\n                    message.error(res.errors[0].message, 7);\r\n                }\r\n                if (res && res.data && res.data.login) {\r\n                    window.location.reload();\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                {...layout}\r\n                style={{ width: '100%', maxWidth: '500px', margin: '0 auto' }}\r\n                onFinish={handleFormSubmit}\r\n            >\r\n                <h1>Login</h1>\r\n                <Form.Item\r\n                    label=\"Username\"\r\n                    name=\"username\"\r\n                    rules={[{ required: true, message: 'Please input your username!' }]}\r\n                >\r\n                    <Input onChange={(e) => setEmail(e.target.value)} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[{ required: true, message: 'Please input your password!' }]}\r\n                >\r\n                    <Input.Password onChange={(e) => setPassword(e.target.value)} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\" className='form-submit'>\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\n\r\nimport DataTable from '../../components/DataTable';\r\nimport { Section, User } from '../../interfaces';\r\nimport NoViewPermission from '../../components/NoViewPermission';\r\nimport { MyContext } from '../../App';\r\n\r\nconst viewAllowedRoles = ['admin', 'schoolAdmin', 'teacher'];\r\n\r\nconst SectionView = (props) => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    const currentUserRole = user?.role.type;\r\n\r\n    const [section, setSection] = React.useState<Section>();\r\n    const [students, setStudents] = React.useState<readonly User[]>();\r\n\r\n    React.useEffect(() => {\r\n        const urlQuery = new URLSearchParams(props.location.search);\r\n        const id = urlQuery.get('id')\r\n\r\n        const sectionQuery = `\r\n        query($id: String!) {\r\n            section(id: $id) {\r\n                id\r\n                name\r\n            }\r\n        }\r\n        `;\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query: sectionQuery,\r\n                variables: {\r\n                    id\r\n                }\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setSection(res.data.section);\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n        const studentsQuery = `\r\n        query($id: String!) {\r\n            studentsBySectionId(id: $id) {\r\n                id\r\n                firstName\r\n                lastName\r\n                middleInitial\r\n            }\r\n        }\r\n        `;\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query: studentsQuery,\r\n                variables: {\r\n                    id\r\n                }\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setStudents(res.data.studentsBySectionId);\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    }, []);\r\n\r\n    if (!(currentUserRole && viewAllowedRoles.includes(currentUserRole))) {\r\n        return <NoViewPermission />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to='/sections'><Button icon={<ArrowLeftOutlined />}>Return To Sections</Button></Link>\r\n            <h1>{section?.name}</h1>\r\n            <DataTable\r\n                data={students}\r\n                columns={[\r\n                    {\r\n                        title: '',\r\n                        dataIndex: 'id',\r\n                        key: 'id',\r\n                        render: (id, record, index) => (index + 1)\r\n                    },\r\n                    {\r\n                        title: 'Last Name',\r\n                        dataIndex: 'lastName',\r\n                        key: 'lastName'\r\n                    },\r\n                    {\r\n                        title: 'First Name',\r\n                        dataIndex: 'firstName',\r\n                        key: 'firstName'\r\n                    },\r\n                    {\r\n                        title: 'Middle Initial',\r\n                        dataIndex: 'middleInitial',\r\n                        key: 'middleInitial'\r\n                    },\r\n                ]}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SectionView;\r\n","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\n\r\nimport { MyClass, Grade, } from '../../interfaces';\r\nimport DataTable from '../../components/DataTable';\r\nimport { getQuarterNumber } from '../../utils/utils';\r\nimport NoViewPermission from '../../components/NoViewPermission';\r\nimport { MyContext } from '../../App';\r\n\r\nconst viewAllowedRoles = ['admin', 'schoolAdmin', 'teacher'];\r\n\r\nconst GradeView = (props) => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    const currentUserRole = user?.role.type;\r\n\r\n    const [myClass, setMyClass] = React.useState<MyClass>();\r\n    const [quarterNumber, setQuarterNumber] = React.useState<string>('');\r\n    const [grades, setGrades] = React.useState<readonly Grade[]>();\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n\r\n    const urlQuery = new URLSearchParams(props.location.search);\r\n    const id = urlQuery.get('classId');\r\n    const quarter = urlQuery.get('quarter');\r\n\r\n    React.useEffect(() => {\r\n        setIsLoading(true);\r\n        const classQuery = `\r\n        query($id: String!) {\r\n            class(id: $id) {\r\n                id\r\n                name\r\n                teacherId {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                }\r\n                sectionId {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n        `;\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query: classQuery,\r\n                variables: {\r\n                    id\r\n                }\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setMyClass(res.data.class);\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n        const gradesQuery = `\r\n            query($classId: String!, $quarter: Int) {\r\n                gradesByClassId(classId: $classId, quarter: $quarter) {\r\n                    id\r\n                    studentId {\r\n                        firstName\r\n                        lastName\r\n                        middleInitial\r\n                    }\r\n                    scores\r\n                    quarter\r\n                }\r\n            }\r\n            `;\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query: gradesQuery,\r\n                variables: {\r\n                    classId: id,\r\n                    quarter: parseInt(quarter as string)\r\n                }\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setGrades(res.data.gradesByClassId);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setIsLoading(false);\r\n            });\r\n\r\n        setQuarterNumber(getQuarterNumber(quarter));\r\n    }, []);\r\n\r\n    const userCanUploadGrade = () => {\r\n        let ret = false;\r\n        if (user?.role.type == 'admin' || user?.role.type == 'schoolAdmin') {\r\n            ret = true;\r\n        } else if (myClass?.teacherId.id == user?.id) {\r\n            ret = true;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    if (!(currentUserRole && viewAllowedRoles.includes(currentUserRole))) {\r\n        return <NoViewPermission />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to={`/classes?sectionId=${myClass?.sectionId?.id}`}><Button icon={<ArrowLeftOutlined />}>Return To Classes</Button></Link>\r\n            <h1>{`${quarterNumber} Quarter - ${myClass?.name} - ${myClass?.sectionId?.name}`}</h1>\r\n            <DataTable\r\n                loading={isLoading}\r\n                data={grades}\r\n                columns={[\r\n                    {\r\n                        title: '',\r\n                        dataIndex: 'studentId',\r\n                        key: 'index',\r\n                        render: (id, record, index) => index + 1\r\n                    },\r\n                    {\r\n                        title: 'Student',\r\n                        key: 'student',\r\n                        dataIndex: 'studentId',\r\n                        render: (student) => {\r\n                            if (student) {\r\n                                return `${student.lastName}, ${student.firstName} ${student.middleInitial}.`;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        title: 'Written Works',\r\n                        dataIndex: ['scores', 'ww'],\r\n                        key: 'Written Works',\r\n                        render: (score, record) => (\r\n                            `${score} / ${record.scores.wwTotal}`\r\n                        )\r\n                    },\r\n                    {\r\n                        title: 'Performance Task',\r\n                        dataIndex: ['scores', 'pt'],\r\n                        key: 'Performance Task',\r\n                        render: (score, record) => (\r\n                            `${score} / ${record.scores.ptTotal}`\r\n                        )\r\n                    },\r\n                    {\r\n                        title: 'QA',\r\n                        dataIndex: ['scores', 'qa'],\r\n                        key: 'QA',\r\n                        render: (score, record) => (\r\n                            `${score} / ${record.scores.qaTotal}`\r\n                        )\r\n                    },\r\n                    {\r\n                        title: 'Initial Grade',\r\n                        dataIndex: ['scores', 'initialGrade'],\r\n                        key: 'Initial Grade'\r\n                    },\r\n                    {\r\n                        title: 'Final Grade',\r\n                        dataIndex: ['scores', 'finalGrade'],\r\n                        key: 'Final Grade'\r\n                    }\r\n                ]}\r\n                footer={(pageData) => {\r\n                    return (\r\n                        <Button type='primary' disabled={!userCanUploadGrade()}>\r\n                            <Link\r\n                                to={`/addGrade?classId=${myClass?.id}&quarter=${quarter}`}\r\n                                style={{ display: 'block' }}\r\n                            >\r\n                                Upload Grades\r\n                            </Link>\r\n                        </Button>\r\n                    )\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GradeView;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { Input, Form, Button, message, Select } from 'antd';\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\nimport * as XLSX from 'xlsx';\r\nimport * as _ from 'lodash';\r\n\r\nimport { generateId, getQuarterNumber } from '../../utils/utils';\r\nimport { User, Grade, MyClass } from '../../interfaces';\r\n\r\nimport DataTable from '../../components/DataTable';\r\nimport ConfirmationModal from '../../components/ConfirmationModal';\r\nimport NoViewPermission from '../../components/NoViewPermission';\r\nimport { MyContext } from '../../App';\r\n\r\nconst viewAllowedRoles = ['admin', 'schoolAdmin', 'teacher'];\r\n\r\nconst AddGrade = (props) => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    const currentUserRole = user?.role.type;\r\n\r\n    const [myClass, setMyClass] = React.useState<MyClass>();\r\n    const [quarterNumber, setQuarterNumber] = React.useState<string>('');\r\n    const [grades, setGrades] = React.useState<readonly Grade[]>([]);\r\n    const [confirmationModalIsVisible, setConfirmationModalIsVisible] = React.useState<boolean>(false);\r\n    const [students, setStudents] = React.useState<readonly User[]>();\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n\r\n    const urlQuery = new URLSearchParams(props.location.search);\r\n    const classId = urlQuery.get('classId');\r\n    const quarter = urlQuery.get('quarter');\r\n\r\n    React.useEffect(() => {\r\n        const query = `\r\n        query($id: String!) {\r\n            studentsByClassId(id: $id) {\r\n                id\r\n                firstName\r\n                lastName\r\n                middleInitial\r\n                email\r\n                role\r\n            }\r\n        }\r\n        `;\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query,\r\n                variables: {\r\n                    id: classId\r\n                }\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setStudents(res.data.studentsByClassId);\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n        const classQuery = `\r\n        query($id: String!) {\r\n            class(id: $id) {\r\n                id\r\n                name\r\n                teacherId {\r\n                    firstName\r\n                    lastName\r\n                }\r\n                sectionId {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n        `;\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query: classQuery,\r\n                variables: {\r\n                    id: classId\r\n                }\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setMyClass(res.data.class);\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n        setQuarterNumber(getQuarterNumber(quarter));\r\n    }, []);\r\n\r\n    const normFile = (event) => {\r\n        if (event && event.target && event.target.files) {\r\n            return event.target.files[0]\r\n        }\r\n    };\r\n\r\n    const getStudentIdFromLRN = (lrn: string): string => {\r\n        const student = _.find(students, student => {\r\n            return student.role.lrn == lrn;\r\n        });\r\n\r\n        if (student) {\r\n            return student.id;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    const getScoresFromJson = (jsonObject) => {\r\n        return {\r\n            ww: jsonObject.WW,\r\n            wwTotal: jsonObject['WW-total'],\r\n            pt: jsonObject.PT,\r\n            ptTotal: jsonObject['PT-total'],\r\n            qa: jsonObject.QA,\r\n            qaTotal: jsonObject['QA-total'],\r\n            initialGrade: jsonObject.initial,\r\n            finalGrade: jsonObject.final\r\n        }\r\n    }\r\n\r\n    const transformGradesFromUpload = (jsonObject): Grade => {\r\n        const id = generateId('grade');\r\n        const studentId: string = getStudentIdFromLRN(jsonObject.lrn);\r\n        const scores = getScoresFromJson(jsonObject);\r\n\r\n        return {\r\n            id,\r\n            studentId,\r\n            scores,\r\n            classId: classId ? classId : '',\r\n            quarter: quarter ? parseInt(quarter) : 0\r\n        };\r\n    }\r\n\r\n    const handleFileUploadChange = (event): void => {\r\n        const files = event.target.files\r\n        const file = files[0];\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = async (e) => { // TODO break into smaller functions!\r\n            if (e && e.target && e.target.result) {\r\n                const bstr = e.target.result;\r\n                const wb = XLSX.read(bstr, { type: 'binary' });\r\n                /* Get first worksheet */\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n                /* Convert array of arrays */\r\n                const data = XLSX.utils.sheet_to_json(ws, { blankrows: false });\r\n                const filteredData = _.filter(data, jsonObject => {\r\n                    if (jsonObject.lrn) {\r\n                        return jsonObject;\r\n                    }\r\n                });\r\n\r\n                let sheetIsValid = true;\r\n                const newGrades: Grade[] = [];\r\n                for (const jsonObject of filteredData) {\r\n                    if (jsonObject.lrn) {\r\n                        const gradeObj: Grade = transformGradesFromUpload(jsonObject);\r\n                        newGrades.push(gradeObj);\r\n                    } else {\r\n                        sheetIsValid = false;\r\n                    }\r\n                };\r\n                if (sheetIsValid) {\r\n                    setGrades(newGrades);\r\n                } else {\r\n                    message.error('Some student fields are not filled in. Please complete the Excel sheet before uploading!', 6);\r\n                }\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        reader.readAsBinaryString(file);\r\n    };\r\n\r\n    const handleSaveSection = async (grades: readonly Grade[]) => {\r\n        const addGrade = async () => {\r\n            const query = `\r\n                mutation($grades: [GradeInput!]!, $quarter: Int!) {\r\n                    addGrades(grades: $grades, quarter: $quarter) {\r\n                        id\r\n                    }\r\n                }\r\n                `;\r\n\r\n            fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    query,\r\n                    variables: {\r\n                        grades,\r\n                        quarter: parseInt(quarter as string)\r\n                    }\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.errors) {\r\n                        message.error(res.errors[0].message, 7);\r\n                    }\r\n                    if (res && res.data && res.data.addGrades) {\r\n                        message.success('Grades are succesfully uploaded', 5);\r\n                    }\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n\r\n        await addGrade();\r\n        setConfirmationModalIsVisible(false);\r\n\r\n\r\n        // auto download excel file with passwords\r\n        /* make the worksheet */\r\n        // var ws = XLSX.utils.json_to_sheet([...grades]);\r\n        // /* add to workbook */\r\n        // var wb = XLSX.utils.book_new();\r\n        // XLSX.utils.book_append_sheet(wb, ws, \"Students\");\r\n        // /* write workbook */\r\n        // XLSX.writeFile(wb, `Grades-generated.xlsx`);\r\n    }\r\n\r\n    if (!(currentUserRole && viewAllowedRoles.includes(currentUserRole))) {\r\n        return <NoViewPermission />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to={`/grade?classId=${classId}&quarter=${quarter}`}><Button icon={<ArrowLeftOutlined />}>Return To Grade</Button></Link>\r\n            <h1>{`${quarterNumber} Quarter - ${myClass?.name} - ${myClass?.sectionId?.name}`}</h1>\r\n            <p style={{ color: '#f54c4c' }}>Confirming your upload will overwrite any currently saved grades in the database for this quarter.</p>\r\n            <Form\r\n                onFinish={() => setConfirmationModalIsVisible(true)}\r\n            >\r\n                <Form.Item\r\n                    name='upload'\r\n                    label='Upload'\r\n                    valuePropName='fileList'\r\n                    getValueFromEvent={normFile}\r\n                    rules={[{ required: true, message: 'Please upload a grades file!' }]}\r\n                >\r\n                    <input\r\n                        type='file'\r\n                        id='sectionFileUpload'\r\n                        name='sectionFileUpload'\r\n                        accept='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n                        onChange={(e) => {\r\n                            setIsLoading(true);\r\n                            handleFileUploadChange(e);\r\n                        }} />\r\n                </Form.Item>\r\n\r\n                <h2>Grade Preview:</h2>\r\n                <DataTable\r\n                    loading={isLoading}\r\n                    data={grades}\r\n                    columns={[\r\n                        {\r\n                            title: '',\r\n                            dataIndex: 'studentId',\r\n                            key: 'index',\r\n                            render: (id, record, index) => index + 1\r\n                        },\r\n                        {\r\n                            title: 'Student',\r\n                            dataIndex: 'studentId',\r\n                            key: 'student',\r\n                            render: (studentId) => {\r\n                                const student = _.find(students, student => {\r\n                                    return student.id == studentId;\r\n                                });\r\n                                if (student) {\r\n                                    return `${student.lastName}, ${student.firstName} ${student.middleInitial}.`;\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            title: 'Written Works',\r\n                            dataIndex: ['scores', 'ww'],\r\n                            key: 'Written Works',\r\n                            render: (score, record) => (\r\n                                `${score} / ${record.scores.wwTotal}`\r\n                            )\r\n                        },\r\n                        {\r\n                            title: 'Performance Task',\r\n                            dataIndex: ['scores', 'pt'],\r\n                            key: 'Performance Task',\r\n                            render: (score, record) => (\r\n                                `${score} / ${record.scores.ptTotal}`\r\n                            )\r\n                        },\r\n                        {\r\n                            title: 'QA',\r\n                            dataIndex: ['scores', 'qa'],\r\n                            key: 'QA',\r\n                            render: (score, record) => (\r\n                                `${score} / ${record.scores.qaTotal}`\r\n                            )\r\n                        },\r\n                        {\r\n                            title: 'Initial Grade',\r\n                            dataIndex: ['scores', 'initialGrade'],\r\n                            key: 'Initial Grade'\r\n                        },\r\n                        {\r\n                            title: 'Final Grade',\r\n                            dataIndex: ['scores', 'finalGrade'],\r\n                            key: 'Final Grade'\r\n                        }\r\n                    ]}\r\n                />\r\n                <Form.Item>\r\n                    <Button type='primary' htmlType='submit' style={{ marginBottom: '10px' }}>Upload To Database</Button><br />\r\n                </Form.Item>\r\n            </Form>\r\n            <ConfirmationModal\r\n                visible={confirmationModalIsVisible}\r\n                onConfirm={async () => {\r\n                    await handleSaveSection(grades);\r\n                }}\r\n                onCancel={() => setConfirmationModalIsVisible(false)}\r\n            />\r\n        </>\r\n    );\r\n}\r\nexport default AddGrade;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\n\r\nimport { MyClass, Grade, User } from '../../interfaces';\r\nimport DataTable from '../../components/DataTable';\r\nimport NoViewPermission from '../../components/NoViewPermission';\r\nimport { MyContext } from '../../App';\r\n\r\nconst viewAllowedRoles = ['admin', 'schoolAdmin', 'teacher'];\r\ninterface FinalGrade {\r\n    student: User,\r\n    1: number,\r\n    2: number,\r\n    3: number,\r\n    4: number\r\n}\r\n\r\nconst getFinalGrades = (grades: Grade[]): FinalGrade[] => {\r\n    const finalGrades: FinalGrade[] = [];\r\n    _.each(grades, rawGrade => {\r\n        const finalGrade = _.find(finalGrades, grade => {\r\n            return rawGrade.studentId.id == grade.student.id;\r\n        });\r\n        if (finalGrade) {\r\n            finalGrade[rawGrade.quarter] = rawGrade.scores.finalGrade;\r\n        } else {\r\n            const newFinalGrade: FinalGrade = {\r\n                student: rawGrade.studentId,\r\n                1: 0,\r\n                2: 0,\r\n                3: 0,\r\n                4: 0\r\n            };\r\n            newFinalGrade[rawGrade.quarter] = rawGrade.scores.finalGrade;\r\n            finalGrades.push(newFinalGrade);\r\n        }\r\n    });\r\n    return finalGrades;\r\n}\r\n\r\n// TODO unconfirmed formula\r\nconst getFinalGrade = (grade: FinalGrade): number => {\r\n    return (grade['1'] + grade['2'] + grade['3'] + grade['4']) / 4;\r\n}\r\n\r\nconst FinalGrades = (props) => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    const currentUserRole = user?.role.type;\r\n\r\n    const [myClass, setMyClass] = React.useState<MyClass>();\r\n    const [grades, setGrades] = React.useState<readonly FinalGrade[]>();\r\n\r\n    const urlQuery = new URLSearchParams(props.location.search);\r\n    const id = urlQuery.get('classId');\r\n\r\n    React.useEffect(() => {\r\n        const classQuery = `\r\n        query($id: String!) {\r\n            class(id: $id) {\r\n                id\r\n                name\r\n                teacherId {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                }\r\n                sectionId {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n        `;\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query: classQuery,\r\n                variables: {\r\n                    id\r\n                }\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setMyClass(res.data.class);\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n        const gradesQuery = `\r\n            query($classId: String!) {\r\n                gradesByClassId(classId: $classId) {\r\n                    id\r\n                    studentId {\r\n                        id\r\n                        firstName\r\n                        lastName\r\n                        middleInitial\r\n                    }\r\n                    scores\r\n                    quarter\r\n                }\r\n            }\r\n            `;\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query: gradesQuery,\r\n                variables: {\r\n                    classId: id\r\n                }\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setGrades(getFinalGrades(res.data.gradesByClassId));\r\n                // setGrades(res.data.gradesByClassId);\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    }, []);\r\n\r\n    if (!(currentUserRole && viewAllowedRoles.includes(currentUserRole))) {\r\n        return <NoViewPermission />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to={`/classes?sectionId=${myClass?.sectionId?.id}`}><Button icon={<ArrowLeftOutlined />}>Return To Classes</Button></Link>\r\n            <h1>{`Final grades - ${myClass?.name} - ${myClass?.sectionId?.name}`}</h1>\r\n            <DataTable\r\n                data={grades}\r\n                columns={[\r\n                    {\r\n                        title: '',\r\n                        dataIndex: 'student',\r\n                        key: 'index',\r\n                        render: (id, record, index) => index + 1\r\n                    },\r\n                    {\r\n                        title: 'Student',\r\n                        key: 'student',\r\n                        dataIndex: 'student',\r\n                        render: (student) => {\r\n                            if (student) {\r\n                                return `${student.lastName}, ${student.firstName} ${student.middleInitial}.`;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        title: '1st Quarter',\r\n                        dataIndex: '1',\r\n                        key: '1st-quarter'\r\n                    },\r\n                    {\r\n                        title: '2nd Quarter',\r\n                        dataIndex: '2',\r\n                        key: '2nd-quarter'\r\n                    },\r\n                    {\r\n                        title: '3rd Quarter',\r\n                        dataIndex: '3',\r\n                        key: '3rd-quarter'\r\n                    },\r\n                    {\r\n                        title: '4th Quarter',\r\n                        dataIndex: '4',\r\n                        key: '4th-quarter'\r\n                    },\r\n                    {\r\n                        title: 'Final Grade',\r\n                        dataIndex: 'student',\r\n                        key: 'final-grade',\r\n                        render: (value, record) => {\r\n                            return getFinalGrade(record);\r\n                        }\r\n                    },\r\n                ]}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default FinalGrades;\r\n","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { Button, Modal, Form, Select, Input, message } from 'antd';\r\n\r\nimport { User, Section } from '../interfaces';\r\nimport { MyContext } from './../App';\r\nimport { generateId } from '../utils/utils';\r\n\r\ninterface Properties {\r\n    sectionId?: string\r\n}\r\n\r\nconst AddClassModal = (props: Properties) => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n\r\n    const [sections, setSections] = React.useState<readonly Section[]>();\r\n    const [isVisible, setIsVisible] = React.useState<boolean>(false);\r\n    const [teachers, setTeachers] = React.useState<readonly User[]>();\r\n    const [className, setClassName] = React.useState<string>();\r\n    const [selectedTeacherId, setSelectedTeacherId] = React.useState<string>();\r\n    const [selectedSectionId, setSelectedSectionId] = React.useState<string>();\r\n\r\n    React.useEffect(() => {\r\n        if (user) {\r\n            const sectionsQuery = `\r\n            query {\r\n                sections {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n            `;\r\n\r\n            fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    query: sectionsQuery,\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.errors) {\r\n                        message.error(res.errors[0].message, 7);\r\n                    } else {\r\n                        setSections(res.data.sections);\r\n                    }\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n\r\n        const query = `\r\n            query {\r\n                users(filter: {role: {type: \"teacher\"}}) {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    middleInitial\r\n                    email\r\n                    role\r\n                }\r\n            }\r\n        `;\r\n\r\n        if (user?.role.type == 'admin' || user?.role.type == 'schoolAdmin') {\r\n            fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    query\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.errors) {\r\n                        message.error(res.errors[0].message, 7);\r\n                    } else {\r\n                        setTeachers(_.sortBy(res.data.users, 'lastName'));\r\n                    }\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n\r\n        // set default section\r\n        if (props.sectionId) {\r\n            setSelectedSectionId(props.sectionId);\r\n        }\r\n\r\n        // set default teacher\r\n        setSelectedTeacherId(getDefaultTeacherValue());\r\n    }, [props.sectionId]);\r\n\r\n    const layout = {\r\n        labelCol: { span: 4 },\r\n        wrapperCol: { span: 20 },\r\n    };\r\n    const tailLayout = {\r\n        wrapperCol: { offset: 4, span: 20 },\r\n    };\r\n\r\n    const handleSave = async () => {\r\n        const id = generateId('class');\r\n        const args = {\r\n            id,\r\n            name: className,\r\n            teacherId: selectedTeacherId,\r\n            sectionId: selectedSectionId\r\n        }\r\n\r\n        const query = `\r\n        mutation($id: String!, $name: String, $teacherId: String!, $sectionId: String!) {\r\n            addClass(id: $id, name: $name, teacherId: $teacherId, sectionId: $sectionId) {\r\n                id\r\n                name\r\n            }\r\n        }\r\n        `;\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query,\r\n                variables: args\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setIsVisible(false);\r\n                window.location.reload();\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    const getDefaultTeacherValue = () => {\r\n        if (user && user.role && user.role.type == 'teacher') {\r\n            return user.id;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                visible={isVisible}\r\n                title='Add a Class'\r\n                footer={[]}\r\n                width='600px'\r\n                onCancel={() => setIsVisible(false)}\r\n                maskClosable={false}\r\n            >\r\n                <Form\r\n                    {...layout}\r\n                    onFinish={handleSave}\r\n                >\r\n                    <Form.Item\r\n                        label=\"Section\"\r\n                        name=\"section\"\r\n                        rules={[{ required: true, message: 'Please select a section!' }]}\r\n                        initialValue={selectedSectionId}\r\n                    >\r\n                        <Select\r\n                            value={selectedSectionId}\r\n                            onChange={(value: string) => setSelectedSectionId(value)}\r\n                            placeholder='select a section...'\r\n                        >\r\n                            {\r\n                                _.map(sections, section => {\r\n                                    return <Select.Option value={section.id} key={section.id}>{section.name}</Select.Option>\r\n                                })\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Teacher\"\r\n                        name=\"teacher\"\r\n                        rules={[{ required: true, message: 'Please select a teacher!' }]}\r\n                        initialValue={selectedTeacherId}\r\n                    >\r\n                        <Select\r\n                            value={selectedTeacherId}\r\n                            onChange={(value: string) => setSelectedTeacherId(value)}\r\n                            placeholder='select a teacher...'\r\n                        >\r\n                            {\r\n                                user && user.role && user.role.type == 'teacher' ?\r\n                                    <Select.Option value={user.id} key={user.id}>{`${user.lastName}, ${user.firstName} ${user.middleInitial}`}</Select.Option> :\r\n                                    _.map(teachers, teacher => {\r\n                                        return <Select.Option value={teacher.id} key={teacher.id}>{`${teacher.lastName}, ${teacher.firstName} ${teacher.middleInitial}`}</Select.Option>\r\n                                    })\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Class name\"\r\n                        name=\"className\"\r\n                        rules={[{ required: true, message: 'Please input a class name!' }]}\r\n                    >\r\n                        <Input onChange={(e) => setClassName(e.target.value)} placeholder='input a name...' />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item {...tailLayout}>\r\n                        <Button type=\"primary\" htmlType=\"submit\" className='form-submit'>\r\n                            Add To Database\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n            <Button type='primary' onClick={() => setIsVisible(true)}>Add Class</Button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddClassModal;\r\n","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Radio } from 'antd';\r\n\r\n\r\nimport { MyClass } from '../../interfaces';\r\nimport DataTable, { getColumnSearchProps, customSorter } from '../../components/DataTable';\r\nimport AddClassModal from '../../components/AddClassModal';\r\nimport NoViewPermission from '../../components/NoViewPermission';\r\nimport { MyContext } from '../../App';\r\n\r\nconst viewAllowedRoles = ['admin', 'schoolAdmin', 'teacher'];\r\n\r\nconst Classes = (props) => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    const currentUserRole = user?.role.type;\r\n\r\n    const [classes, setClasses] = React.useState<readonly MyClass[]>([]);\r\n    const [filter, setFilter] = React.useState<'mine' | 'all'>('mine');\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n\r\n    const urlQuery = new URLSearchParams(props.location.search);\r\n    const sectionId = urlQuery.get('sectionId') || undefined;\r\n\r\n    React.useEffect(() => {\r\n        setIsLoading(true);\r\n        if (user) {\r\n            const classesQuery = `\r\n                query {\r\n                    classes {\r\n                        id\r\n                        name\r\n                        teacherId {\r\n                            id\r\n                            firstName\r\n                            lastName\r\n                        }\r\n                        sectionId {\r\n                            id\r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n            `;\r\n\r\n            fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    query: classesQuery\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    setClasses(res.data.classes);\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    }, []);\r\n\r\n    let finalClasses: MyClass[] = [];\r\n    if (filter == 'mine') {\r\n        const filtered = _.filter(classes, myClass => {\r\n            return myClass.teacherId.id == user?.id;\r\n        });\r\n        finalClasses = [...filtered];\r\n    } else if (filter == 'all') {\r\n        finalClasses = [...classes];\r\n    }\r\n\r\n    if (!(currentUserRole && viewAllowedRoles.includes(currentUserRole))) {\r\n        return <NoViewPermission />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Classes</h1>\r\n\r\n            <Radio.Group onChange={(e) => setFilter(e.target.value)} value={filter}>\r\n                <Radio value='all'>All</Radio>\r\n                <Radio value='mine'>My Classes</Radio>\r\n            </Radio.Group>\r\n\r\n            <DataTable\r\n                loading={isLoading}\r\n                data={finalClasses}\r\n                columns={[\r\n                    {\r\n                        title: 'Name',\r\n                        dataIndex: 'name',\r\n                        key: 'name',\r\n                        sorter: (a, b) => customSorter(a, b, 'name'),\r\n                        ...getColumnSearchProps('name')\r\n                    },\r\n                    {\r\n                        title: 'Section',\r\n                        dataIndex: 'sectionId',\r\n                        key: 'section',\r\n                        render: (sectionId) => {\r\n                            if (sectionId) {\r\n                                return sectionId.name;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        },\r\n                        sorter: (a, b) => {\r\n                            if (a && !b) return 1;\r\n                            if (!a && b) return -1;\r\n                            if (!a && !b) return 0;\r\n\r\n                            const aName = a.name;\r\n                            const bName = b.name;\r\n\r\n                            return aName.localeCompare(bName);\r\n                        },\r\n                        ...getColumnSearchProps('sectionId', { referencedPropertyName: 'name' })\r\n                    },\r\n                    {\r\n                        title: 'Teacher',\r\n                        dataIndex: 'teacherId',\r\n                        key: 'teacherId',\r\n                        render: (teacherId) => {\r\n                            if (teacherId) {\r\n                                return `${teacherId.lastName}, ${teacherId.firstName}`;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        },\r\n                        sorter: (a, b) => {\r\n                            if (a && !b) return 1;\r\n                            if (!a && b) return -1;\r\n                            if (!a && !b) return 0;\r\n\r\n                            const aName = `${a.teacherId.lastName}, ${a.teacherId.firstName}`;\r\n                            const bName = `${b.teacherId.lastName}, ${b.teacherId.firstName}`;\r\n\r\n                            return aName.localeCompare(bName);\r\n                        },\r\n                        ...getColumnSearchProps(\r\n                            'teacherId',\r\n                            {\r\n                                customFilter: (valueToSearch, record) => {\r\n                                    const name = `${record.teacherId.lastName}, ${record.teacherId.firstName}`;\r\n                                    return name.toLowerCase().indexOf(valueToSearch.toLowerCase()) >= 0;\r\n                                }\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        title: 'Grades',\r\n                        dataIndex: 'id',\r\n                        key: '1st-quarter',\r\n                        render: (id) => {\r\n                            return <Link to={`/grade?classId=${id}&quarter=1`}><Button>1st Quarter</Button></Link>;\r\n                        }\r\n                    },\r\n                    {\r\n                        title: '',\r\n                        dataIndex: 'id',\r\n                        key: '2nd-quarter',\r\n                        render: (id) => {\r\n                            return <Link to={`/grade?classId=${id}&quarter=2`}><Button>2nd Quarter</Button></Link>;\r\n                        }\r\n                    },\r\n                    {\r\n                        title: '',\r\n                        dataIndex: 'id',\r\n                        key: '3rd-quarter',\r\n                        render: (id) => {\r\n                            return <Link to={`/grade?classId=${id}&quarter=3`}><Button>3rd Quarter</Button></Link>;\r\n                        }\r\n                    },\r\n                    {\r\n                        title: '',\r\n                        dataIndex: 'id',\r\n                        key: '4th-quarter',\r\n                        render: (id) => {\r\n                            return <Link to={`/grade?classId=${id}&quarter=4`}><Button>4th Quarter</Button></Link>;\r\n                        }\r\n                    },\r\n                    {\r\n                        title: '',\r\n                        dataIndex: 'id',\r\n                        key: 'finale-grades',\r\n                        render: (id) => {\r\n                            return <Link to={`/finalGrades?classId=${id}`}><Button>Final Grades</Button></Link>;\r\n                        }\r\n                    },\r\n                ]}\r\n                footer={(pageData) => {\r\n                    return (\r\n                        <AddClassModal sectionId={sectionId} />\r\n                    )\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Classes;\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\n\r\nconst LogoutButton = () => {\r\n\r\n    const logout = async () => {\r\n        const query = `\r\n        mutation {\r\n                logout\r\n            }\r\n        `;\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query\r\n            })\r\n        })\r\n            .then(res => console.log(res))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            onClick={async () => {\r\n                await logout();\r\n                window.location.reload();\r\n            }}\r\n        >\r\n            Logout\r\n        </Button>\r\n    );\r\n}\r\n\r\nexport default LogoutButton;","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { Link } from 'react-router-dom';\r\nimport { Menu } from 'antd';\r\n\r\nimport { MyContext } from './../App';\r\nimport LogoutButton from './LogoutButton';\r\n\r\nconst Header = () => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    const [selectedKey, setSelectedKey] = React.useState<string>('');\r\n\r\n    return (\r\n        <div id='header'>\r\n            <Menu\r\n                mode='horizontal'\r\n                selectedKeys={[selectedKey]}\r\n                onClick={(e) => {\r\n                    setSelectedKey(e.key.toString());\r\n                }}\r\n            >\r\n                {\r\n                    user ?\r\n                        <>\r\n                            {\r\n                                user.role.type == 'admin' &&\r\n                                <>\r\n                                    <Menu.Item key='sections'><Link to='/sections'>Sections</Link></Menu.Item>\r\n                                    <Menu.Item key='classes'><Link to='/classes'>Classes</Link></Menu.Item>\r\n                                    <Menu.Item key='teachers'><Link to='/teachers'>Teachers</Link></Menu.Item>\r\n                                    <Menu.Item key='users'><Link to='/users'>Users</Link></Menu.Item>\r\n                                </>\r\n                            }\r\n                            {\r\n                                user.role.type == 'schoolAdmin' &&\r\n                                <>\r\n                                    <Menu.Item key='sections'><Link to='/sections'>Sections</Link></Menu.Item>\r\n                                    <Menu.Item key='teachers'><Link to='/teachers'>Teachers</Link></Menu.Item>\r\n                                </>\r\n                            }\r\n                            {\r\n                                user.role.type == 'teacher' &&\r\n                                <>\r\n                                    <Menu.Item key='classes'><Link to='/classes'>Classes</Link></Menu.Item>\r\n                                </>\r\n                            }\r\n                            {\r\n                                user.role.type == 'student' &&\r\n                                <>\r\n                                    <Menu.Item key='studentClasses'><Link to='/studentClasses'>Classes</Link></Menu.Item>\r\n                                    <Menu.Item key='grade'><Link to='/grade'>Grade</Link></Menu.Item>\r\n                                </>\r\n                            }\r\n                            <LogoutButton />\r\n                            <span id='welcome'>{`Welcome, ${user.firstName} ${user.lastName}!`}</span>\r\n                        </> :\r\n                        <>\r\n                            {/* <Menu.Item key='signup'><Link to=\"/signup\">Sign Up</Link></Menu.Item> */}\r\n                            <Menu.Item key='login'><Link to=\"/login\">Log In</Link></Menu.Item>\r\n                        </>\r\n                }\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\n\r\n\r\nimport { MyClass } from '../../interfaces';\r\nimport DataTable, { getColumnSearchProps, customSorter } from '../../components/DataTable';\r\nimport NoViewPermission from '../../components/NoViewPermission';\r\n\r\nimport { MyContext } from '../../App';\r\n\r\nconst viewAllowedRoles = ['admin', 'student'];\r\n\r\nconst StudentClasses = (props) => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    const currentUserRole = user?.role.type;\r\n\r\n    const [classes, setClasses] = React.useState<readonly MyClass[]>([]);\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        setIsLoading(true);\r\n        if (user) {\r\n            const sectionId = user.role.sectionId;\r\n            const classesQuery = `\r\n                query($sectionId: String!) {\r\n                    classesBySectionId(sectionId: $sectionId) {\r\n                        id\r\n                        name\r\n                        teacherId {\r\n                            id\r\n                            firstName\r\n                            lastName\r\n                        }\r\n                    }\r\n                }\r\n            `;\r\n\r\n            fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    query: classesQuery,\r\n                    variables: {\r\n                        sectionId\r\n                    }\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    setClasses(res.data.classesBySectionId);\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    }, []);\r\n\r\n    if (!(currentUserRole && viewAllowedRoles.includes(currentUserRole))) {\r\n        return <NoViewPermission />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Classes</h1>\r\n\r\n            <DataTable\r\n                loading={isLoading}\r\n                data={classes}\r\n                columns={[\r\n                    {\r\n                        title: 'Name',\r\n                        dataIndex: 'name',\r\n                        key: 'name',\r\n                        sorter: (a, b) => customSorter(a, b, 'name'),\r\n                        ...getColumnSearchProps('name')\r\n                    },\r\n                    {\r\n                        title: 'Teacher',\r\n                        dataIndex: 'teacherId',\r\n                        key: 'teacherId',\r\n                        render: (teacherId) => {\r\n                            if (teacherId) {\r\n                                return `${teacherId.lastName}, ${teacherId.firstName}`;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        },\r\n                        sorter: (a, b) => {\r\n                            if (a && !b) return 1;\r\n                            if (!a && b) return -1;\r\n                            if (!a && !b) return 0;\r\n\r\n                            const aName = `${a.teacherId.lastName}, ${a.teacherId.firstName}`;\r\n                            const bName = `${b.teacherId.lastName}, ${b.teacherId.firstName}`;\r\n\r\n                            return aName.localeCompare(bName);\r\n                        },\r\n                        ...getColumnSearchProps(\r\n                            'teacherId',\r\n                            {\r\n                                customFilter: (valueToSearch, record) => {\r\n                                    const name = `${record.teacherId.lastName}, ${record.teacherId.firstName}`;\r\n                                    return name.toLowerCase().indexOf(valueToSearch.toLowerCase()) >= 0;\r\n                                }\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        title: 'Grades',\r\n                        dataIndex: 'id',\r\n                        key: '1st-quarter',\r\n                        render: (id, record) => {\r\n                            return <Link to={`/studentGrade?classId=${id}&class=${record.name}`}><Button>View</Button></Link>;\r\n                        }\r\n                    }\r\n                ]}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StudentClasses;\r\n","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\n\r\nimport { MyClass, Grade, } from '../../interfaces';\r\nimport DataTable from '../../components/DataTable';\r\nimport NoViewPermission from '../../components/NoViewPermission';\r\nimport { MyContext } from '../../App';\r\n\r\nconst viewAllowedRoles = ['admin', 'student'];\r\n\r\nconst GradeView = (props) => {\r\n    const context = React.useContext(MyContext);\r\n    const { user } = context;\r\n    const currentUserRole = user?.role.type;\r\n\r\n    const [grades, setGrades] = React.useState<readonly Grade[]>();\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n\r\n    const urlQuery = new URLSearchParams(props.location.search);\r\n    const id = urlQuery.get('classId');\r\n    const className = urlQuery.get('class');\r\n\r\n    React.useEffect(() => {\r\n        setIsLoading(true);\r\n\r\n        const gradesQuery = `\r\n            query($classId: String!) {\r\n                studentGradesByClassId(classId: $classId) {\r\n                    id\r\n                    scores\r\n                    quarter\r\n                }\r\n            }\r\n            `;\r\n\r\n        fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                query: gradesQuery,\r\n                variables: {\r\n                    classId: id\r\n                }\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setGrades(res.data.studentGradesByClassId);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setIsLoading(false);\r\n            });\r\n\r\n    }, []);\r\n\r\n    if (!(currentUserRole && viewAllowedRoles.includes(currentUserRole))) {\r\n        return <NoViewPermission />\r\n    }\r\n\r\n    const getFinalGrade = (): number | 'NA' => {\r\n        let ret: 'NA' = 'NA';\r\n        let sum = 0;\r\n\r\n        if (grades && grades.length == 4) {\r\n            _.forEach(grades, grade => {\r\n                sum += grade.scores.finalGrade;\r\n            });\r\n        } else {\r\n            return ret;\r\n        }\r\n\r\n        return sum / 4;\r\n    }\r\n\r\n    const sortedByQuarter = _.sortBy(grades, 'quarter');\r\n\r\n    return (\r\n        <>\r\n            <Link to={`/studentClasses`}><Button icon={<ArrowLeftOutlined />}>Return To Classes</Button></Link>\r\n            <h1>{`${className}`}</h1>\r\n            <DataTable\r\n                loading={isLoading}\r\n                data={sortedByQuarter}\r\n                columns={[\r\n                    {\r\n                        title: 'Quarter',\r\n                        key: 'quarter',\r\n                        dataIndex: 'quarter'\r\n                    },\r\n                    {\r\n                        title: 'Written Works',\r\n                        dataIndex: ['scores', 'ww'],\r\n                        key: 'Written Works',\r\n                        render: ((value, record) => (\r\n                            `${value} / ${record.scores.wwTotal}`\r\n                        ))\r\n                    },\r\n                    {\r\n                        title: 'Performance Task',\r\n                        dataIndex: ['scores', 'pt'],\r\n                        key: 'Performance Task',\r\n                        render: ((value, record) => (\r\n                            `${value} / ${record.scores.ptTotal}`\r\n                        ))\r\n                    },\r\n                    {\r\n                        title: 'QA',\r\n                        dataIndex: ['scores', 'qa'],\r\n                        key: 'qa',\r\n                        render: ((value, record) => (\r\n                            `${value} / ${record.scores.qaTotal}`\r\n                        ))\r\n                    },\r\n                    {\r\n                        title: 'Initial Grade',\r\n                        dataIndex: ['scores', 'initialGrade'],\r\n                        key: 'initialGrade'\r\n                    },\r\n                    {\r\n                        title: 'Final Grade',\r\n                        dataIndex: ['scores', 'finalGrade'],\r\n                        key: 'Final Grade'\r\n                    }\r\n                ]}\r\n            />\r\n            <h2>Final Grade: {getFinalGrade()}</h2>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GradeView;\r\n","import React from 'react';\nimport './App.css';\n\nimport {\n  Switch,\n  Route,\n  useHistory\n} from \"react-router-dom\";\n\nimport { Card, Spin } from 'antd';\n\nimport Users from './views/admin/Users';\nimport AddUser from './views/admin/AddUser';\nimport Sections from './views/schoolAdmin/Sections';\nimport AddSection from './views/schoolAdmin/AddSection';\nimport Teachers from './views/schoolAdmin/Teachers';\nimport AddTeacher from './views/schoolAdmin/AddTeacher';\nimport Login from './views/universal/Login';\nimport SectionView from './views/teacher/Section';\nimport GradeView from './views/teacher/GradeView';\nimport AddGrade from './views/teacher/AddGrade';\nimport FinalGrades from './views/teacher/FinalGrades';\nimport Classes from './views/teacher/Classes';\nimport Header from './components/Header';\nimport StudentClasses from './views/student/StudentClasses';\nimport StudentGrade from './views/student/StudentGrade';\n\nimport { User } from './interfaces';\n\nfunction App() {\n  const history = useHistory();\n\n  const [user, setUser] = React.useState<User>();\n  const [isLoading, setIsLoading] = React.useState<boolean>(true);\n\n  React.useEffect(() => {\n    const query = `\n    query {\n        me {\n            id\n            firstName\n            lastName\n            middleInitial\n            email\n            role\n        }\n    }\n    `;\n\n    fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        query\n      })\n    })\n      .then(res => res.json())\n      .then(res => {\n        setUser(res.data.me);\n        setIsLoading(false);\n      })\n      .catch(err => {\n        console.log(err);\n        setIsLoading(false);\n      });\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className='spin-container'>\n        <Spin size='large' tip=\"Loading...\"></Spin>\n      </div>\n    );\n  }\n\n  return (\n    <MyContext.Provider value={{\n      user: user\n    }}>\n      {!user && history.push('/login')}\n\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Header />\n        </header>\n        <div className='App-body'>\n          <Card>\n            <Switch>\n              <Route path='/login' component={() => <Login />} />\n              <Route path='/sections' component={Sections} />\n              <Route path='/section' component={SectionView} />\n              <Route path='/addSection' component={AddSection} />\n              <Route path='/classes' component={Classes} />\n              <Route path='/grade' component={GradeView} />\n              <Route path='/addGrade' component={AddGrade} />\n              <Route path='/finalGrades' component={FinalGrades} />\n              <Route path='/users' component={Users} />\n              <Route path='/addUser' component={AddUser} />\n              <Route path='/teachers' component={Teachers} />\n              <Route path='/addTeacher' component={AddTeacher} />\n              <Route path='/studentClasses' component={StudentClasses} />\n              <Route path='/studentGrade' component={StudentGrade} />\n              {user && user.role.type == 'student' ? <Route exact path='/' component={StudentClasses} /> : <Route exact path='/' component={Classes} />}\n            </Switch>\n          </Card>\n        </div>\n      </div>\n    </MyContext.Provider>\n  );\n}\n\nexport default App;\n\nexport const MyContext = React.createContext<{\n  user: User | undefined\n}>({\n  user: undefined\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router><App /></Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}